Total before late penalty: [60.5/61] 


[9.5/10] Part 1: Commented original.ys file
-------------------------

The code can be divided into the following sections.  In order to get
full marks for a section, the comments written should indicate an
understanding of what the instructions do and how they relate to the C
code. The sections are:

    [1/1] Calling maxSubArray in main (including its setup). line 24-25 *sa_start = *sa_end = array

    [1/1] Saving registers and checking for base case (array with one element). 

    [2/2] L1/L2/L3 : Initialization and first loop (left side). 

    [2/2] L4/L5/L6 : Second loop (right side). 

    [2.5/3] L7/L8: Recursive calls. line 78 r14 = sa_end
    								line 81 r12 = sa_start
                                    line 84 is allocating a spot in the stack for sub_start
								    line 85 rdx = rsp = &sub_start
								    line 86 is allocating a spot in the stack for sub_end
								    line 87 rcx = rsp = &sub_end
                                    line 89 rcx = sub_end
                                    line 90 rdx = sub_start
                                    line 95 *sa_start = sub_start
                                    line 96 *sa_end = sub_end

    [1/1] L9: Restoring registers and return.  

[10/10] Part 2: Performance evaluation 
------------------------------------

    [5/5] Correctly evaluated the code on the original array.
        [1/1] 2097 cycles on Sequential.
        [1/1] 5495 cycles on PIPE with stalling.
        [1/1] 2696 cycles on PIPE with data forwarding.
        [1/1] 2428 cycles on PIPE with D.F.+Branch Prediction
        [1/1] 2097 retired instructions for all cases

    [5/5] Provided at least 5 additional arrays and reported evaluations 
    
        [1/1] Includes at least one "regular", random array with around
             the same size as the original (between 6 and 20 elements).
       
        [1/1] Includes at least one very small array (up to two elements).
  
        [1/1] Includes at least one very large array (at least 30 elements).
  
        [1/1] Includes at least one sorted array (can be the same as one of
             the above).
  
        [1/1] Includes at least one array with repeating items (can be the
             same as one of the above).


[40/40] Part 3: Code Optimization 
------------------------------------

For evaluating the code performance in this part, we consider the
average of 10 test cases.


    [null/15] Part i: sort_reorder.ys 
        [6/6] Runs at least 20% faster on PIPE with stalling # delta: 20.06%
        [4/4] Runs at close to the same speed on Sequential and # delta: 6.4399999999999995%
             PIPE with D.F.+Branch Prediction # delta: 5.48%
        [5/5] Lists results of sort_reorder for provided arrays # result_9.csv(AssertionError: expected 'INCORRECT' to be undefined)
             (1 point for each listed test, up to 5 tests)

            Additional penalties:
            [0/-15] Uses any instruction not existent in the original file # []
            [0/-5]  The provided code doesn't produce the right result in some cases 
            [0/-15] The provided code doesn't produce the right result in all cases 
            [null/-??] Additional penalties at marker's discretion 

    [null/25] Part ii: sort_optimal.ys 
        [7/7] Runs at least 35% faster on PIPE with stalling # delta: 38.629999999999995%
        [7/7] Runs at least 15% faster on # delta: 18.23%
             PIPE with D.F.+Branch Prediction
        [6/6] Runs close to the same speed on Sequential # delta: 18.17%
        [5/5] Lists results of sort_optimal for provided arrays
             (1 point for each listed test, up to 5 tests)
             # result_9.csv(AssertionError: expected 'INCORRECT' to be undefined)

            Additional penalties:
            [0/-4] Uses a callee-saved register without saving its value in stack 
            [0/-10] Changes the order or meaning of arguments 
            [0/-10] The provided code doesn't produce the right result in some cases 
            [0/-25] The provided code doesn't produce the right result in all cases 
            [null/-??] Additional penalties at marker's discretion 


--------------------

[1/1] Filled in Cover Page

--------------------


